#include <math.h>
#include "cache.h"

/*******************CONFIG*********************/

#define THRESHOLD 0.05

#define NUM_SAMPLE 64  // 64 sample sets
#define PSEL_WIDTH 11
#define PSEL_MAX ((1 << PSEL_WIDTH) - 1)
#define PSEL_MIN 0
#define PSEL_THRS PSEL_MAX / 2

/*******************CONFIG*********************/

// randomized LRU & BIP sample sets
unsigned rand_sets[NUM_SAMPLE * 2];
// PSEL COUNTER
uint32_t psel_counter = PSEL_THRS;

bool inLRUSet(uint32_t set) {
    for (uint32_t i = 0; i < NUM_SAMPLE; i++) {
        if (rand_sets[i] == set)
            return true;
    }

    return false;
}

bool inBIPSet(uint32_t set) {
    for (uint32_t i = NUM_SAMPLE; i < NUM_SAMPLE * 2; i++) {
        if (rand_sets[i] == set)
            return true;
    }

    return false;
}

// initialize replacement state
void CACHE::llc_initialize_replacement() {
    srand(time(0));

    bool regenerate = false;

    for (int i = 0; i < NUM_SAMPLE * 2; i++) {
        do {
            regenerate = false;
            rand_sets[i] = rand() % (LLC_SET - 1);  // assign random number from [0, NUM_SET)

            for (int j = 0; j < i; j++) {
                // if set already allocated
                if (rand_sets[i] == rand_sets[j]) {
                    regenerate = 1;
                    break;
                }
            }
        } while (regenerate);
    }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK* current_set, uint64_t ip, uint64_t full_addr, uint32_t type) {
    uint32_t way = 0;

    // fill invalid line first
    for (way = 0; way < NUM_WAY; way++) {
        if (block[set][way].valid == false) {
            DP(if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr >> LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });

            break;
        }
    }

    // LRU  victim
    if (way == NUM_WAY) {
        for (way = 0; way < NUM_WAY; way++) {
            // move each block down
            if (block[set][way].lru == NUM_WAY - 1) {
                DP(if (warmup_complete[cpu]) {
                cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                cout << dec << " lru: " << block[set][way].lru << endl; });

                break;
            }
        }
    }

    if (way == NUM_WAY) {
        cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
        assert(0);
    }

    return way;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit) {
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK))  // writeback hit does not update LRU state
        return;

    // update replacement state
    if (hit) {
        lru_update(set, way);
    } else {
        // if set in rand [0,64) or below PSEL sat, use LRU
        if (inLRUSet(set)) {
            lru_update(set, way);

            // inc PSEL
            if (psel_counter < PSEL_MAX)
                psel_counter++;
        }
        // if set in rand [64,128) or above PSEL sat, use BIP
        else if (inBIPSet(set)) {
            float r = (float)rand() / RAND_MAX;
            if (r < THRESHOLD) {
                lru_update(set, way);
            } else {
                for (uint32_t i = 0; i < NUM_WAY; i++) {
                    if (block[set][i].lru > block[set][way].lru) {
                        block[set][i].lru--;
                    }
                }
                block[set][way].lru = NUM_WAY - 1;
            }

            // dec PSEL
            if (psel_counter > 0)
                psel_counter--;
        }
        // Main set accessed, choose policy according to PSEL
        else {
            // LRU
            if (psel_counter < PSEL_THRS) {
                lru_update(set, way);
            }
            // BIP
            else {
                float r = (float)rand() / RAND_MAX;
                if (r < THRESHOLD) {
                    lru_update(set, way);
                } else {
                    for (uint32_t i = 0; i < NUM_WAY; i++) {
                        if (block[set][i].lru > block[set][way].lru) {
                            block[set][i].lru--;
                        }
                    }
                    block[set][way].lru = NUM_WAY - 1;
                }
            }
        }
    }
}

void CACHE::llc_replacement_final_stats() {
}
